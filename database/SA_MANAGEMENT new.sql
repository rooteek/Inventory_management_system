DROP TABLE sa_management.CUSTOMER_MST;
CREATE TABLE SA_MANAGEMENT.CUSTOMER_MST 
(   
    CUSTOMER_ID INTEGER PRIMARY KEY,
    PARTY_NAME VARCHAR(100) NOT NULL,
    ADDRESS VARCHAR(300),
	STATE VARCHAR(50),
    CITY VARCHAR(50),
    PINCODE INTEGER,
    PAN INTEGER,
    REGISTRATION_TYPE VARCHAR(50), 
    MOBILE_NO VARCHAR(15) NOT NULL,
    EMAIL VARCHAR(50),
    GST_NO VARCHAR(20),
    NAME_ON_PASSBOOK VARCHAR(100),
    BANK_AC_NO VARCHAR(25),
    IFSC_CODE VARCHAR(20)
);

DROP TABLE sa_management.VENDOR_MST;
CREATE TABLE SA_MANAGEMENT.VENDOR_MST 
(   
    VENDOR_ID INTEGER PRIMARY KEY auto_increment,
    PARTY_NAME VARCHAR(100) NOT NULL,
    ADDRESS VARCHAR(300),
    STATE VARCHAR(50),
    CITY VARCHAR(50),
    PINCODE INTEGER,
    PAN varchar(13),
    REGISTRATION_TYPE VARCHAR(50), 
    MOBILE_NO VARCHAR(15) NOT NULL,
    EMAIL VARCHAR(50), 
    GST_NO VARCHAR(20),
    NAME_ON_PASSBOOK VARCHAR(100),
    BANK_AC_NO VARCHAR(25),
    IFSC_CODE VARCHAR(20)
);
alter table VENDOR_MST modify column pan varchar(13);
insert into VENDOR_MST values
(1,'RUTIK','surat','Gujarat','Udhna','394210','abcd1234d','Regular','908765743','rutik@gmail.com','24gstno','BOB','9283798793','BOBdfk');
select * from VENDOR_MST;
use SA_MANAGEMENT;
CREATE TABLE SA_MANAGEMENT.CATEGORY_MST
(
    CATEGORY_ID INTEGER PRIMARY KEY,
    CATEGORY_NAME VARCHAR(50) NOT NULL
);
insert into CATEGORY_MST values (1,'Box');
CREATE TABLE SA_MANAGEMENT.PRODUCT_MST 
(   
    PRODUCT_ID INTEGER PRIMARY KEY,
    PRODUCT_NAME VARCHAR(50) NOT NULL,
    SALES_PRICE INTEGER,
    PURCHASE_PRICE INTEGER,
    CATEGORY_ID INTEGER,
    HSN_CODE INTEGER,
    IMAGE LONGBLOB,
    FOREIGN KEY (CATEGORY_ID) REFERENCES SA_MANAGEMENT.CATEGORY_MST(CATEGORY_ID)
);
alter table PRODUCT_MST modify PRODUCT_ID int auto_increment;
insert into PRODUCT_MST values(1,'PC',12,15,1,1212,null);
select * from product_mst;

select * from PRODUCT_MST;
ALTER TABLE SA_MANAGEMENT.PRODUCT_MST MODIFY PRODUCT_ID INTEGER AUTO_INCREMENT; 

CREATE TABLE SA_MANAGEMENT.COLOR_MST
(
    COLOR_ID INTEGER PRIMARY KEY,
    COLOR_NAME VARCHAR(20) NOT NULL
);
DROP TABLE SA_MANAGEMENT.STOCK_MANAGEMENT;
CREATE TABLE SA_MANAGEMENT.STOCK_MANAGEMENT
(
    SR_NO INTEGER PRIMARY KEY,
    PRODUCT_ID INTEGER NOT NULL,
    UNIT varchar(20),
    QUANTITY INTEGER NOT NULL,
    FOREIGN KEY (PRODUCT_ID) REFERENCES SA_MANAGEMENT.PRODUCT_MST(PRODUCT_ID)
);
SELECT * FROM SA_MANAGEMENT.STOCK_MANAGEMENT;
ALTER TABLE SA_MANAGEMENT.PRODUCT_IN_EXPENSEs MODIFY SR_NO INTEGER AUTO_INCREMENT;

CREATE TABLE SA_MANAGEMENT.DEPARTMENT_MST
(
    DEPARTMENT_ID INTEGER PRIMARY KEY,
    DEPARTMENT_NAME VARCHAR(20) NOT NULL
);

DROP TABLE SA_MANAGEMENT.EMPLOYEE_MST;
CREATE TABLE SA_MANAGEMENT.EMPLOYEE_MST
(
    USERID VARCHAR(50) PRIMARY KEY,
    PASSWORD VARCHAR(1000) NOT NULL,
    STATUS VARCHAR(10) NOT NULL,
    DEPARTMENT_ID INTEGER NOT NULL,
    FOREIGN KEY (DEPARTMENT_ID) REFERENCES SA_MANAGEMENT.DEPARTMENT_MST(DEPARTMENT_ID)
);

DROP TABLE SA_MANAGEMENT.EMPLOYEE_DETAILS;
CREATE TABLE SA_MANAGEMENT.EMPLOYEE_DETAILS
(
    SR_NO INTEGER,
    EMPLOYEE_FULLNAME VARCHAR(50) NOT NULL,
    BIRTH_DATE DATE NOT NULL,
    GENDER VARCHAR(10) NOT NULL,
    PHONE_NO VARCHAR(15) NOT NULL,
    EMAIL VARCHAR(50) NOT NULL,
    ADDRESS VARCHAR(200),
    STATE VARCHAR(50),
    CITY VARCHAR(50),
    PINCODE INTEGER,
    JOINING_DATE DATE ,
    USERID VARCHAR(50) PRIMARY KEY,
    PASSWORD VARCHAR(50) NOT NULL,
    DEPARTMENT VARCHAR(20) NOT NULL,
    STATUS VARCHAR(20) NOT NULL
);
select * from SA_MANAGEMENT.EMPLOYEE_DETAILS;
alter table EMPLOYEE_DETAILS modify  SR_NO int auto_increment unique key;
drop TABLE SA_MANAGEMENT.SALES_INVOICE;
select * from SA_MANAGEMENT.SALES_INVOICE;
CREATE TABLE SA_MANAGEMENT.SALES_INVOICE
(
    INVOICE_NO INT PRIMARY KEY,
    CUSTOMER_ID INTEGER NOT NULL,
    BILL_DATE DATE NOT NULL,
    GST INTEGER,
    FREIGHT INTEGER,
    DISCOUNT INTEGER,
    NET_AMT INTEGER NOT NULL,
    TOTAL_AMT INTEGER NOT NULL,
    FOREIGN KEY (CUSTOMER_ID) REFERENCES SA_MANAGEMENT.CUSTOMER_MST(CUSTOMER_ID)
);
select * from sa_management.STOCK_MANAGEMENT;
DROP TABLE SA_MANAGEMENT.PURCHASE_INVOICE;
CREATE TABLE SA_MANAGEMENT.PURCHASE_INVOICE
(
    INVOICE_NO INTEGER PRIMARY KEY,
    VENDOR_ID INTEGER NOT NULL,
    BILL_DATE DATE NOT NULL,
    GST INTEGER,
    FREIGHT INTEGER,
    DISCOUNT INTEGER,
    NET_AMT INTEGER NOT NULL,
    TOTAL_AMT INTEGER NOT NULL,
    FOREIGN KEY (VENDOR_ID) REFERENCES SA_MANAGEMENT.VENDOR_MST(VENDOR_ID)
);

DROP table SA_MANAGEMENT.EXPENSES;
CREATE TABLE SA_MANAGEMENT.EXPENSES
(
    INVOICE_NO INTEGER PRIMARY KEY,
    EXPENSE_NAME VARCHAR(50) NOT NULL,
    BILL_DATE DATE NOT NULL,
    GST INTEGER,
    FREIGHT INTEGER,
    DISCOUNT INTEGER,
    NET_AMT INTEGER NOT NULL,
    TOTAL_AMT INTEGER NOT NULL
);
drop TABLE SA_MANAGEMENT.PRODUCT_IN_SALES;
CREATE TABLE SA_MANAGEMENT.PRODUCT_IN_SALES
(
	INVOICE_NO INT,
    PRODUCT_ID INTEGER,	
	QUANTITY INTEGER,
    UNIT VARCHAR(20),
    PRICE INTEGER,
    AMOUNT INTEGER,
    FOREIGN KEY (INVOICE_NO) REFERENCES SA_MANAGEMENT.SALES_INVOICE(INVOICE_NO),
    FOREIGN KEY (PRODUCT_ID) REFERENCES SA_MANAGEMENT.PRODUCT_MST(PRODUCT_ID)
);
select * FROM sa_management.PRODUCT_IN_SALES;

drop TABLE SA_MANAGEMENT.PRODUCT_IN_PURCHASE;
CREATE TABLE SA_MANAGEMENT.PRODUCT_IN_PURCHASE
(
	INVOICE_NO INT,
    PRODUCT_ID INTEGER,	
	QUANTITY INTEGER,
    UNIT VARCHAR(20),
    PRICE INTEGER,
    AMOUNT INTEGER,
    FOREIGN KEY (INVOICE_NO) REFERENCES SA_MANAGEMENT.PURCHASE_INVOICE(INVOICE_NO),
    FOREIGN KEY (PRODUCT_ID) REFERENCES SA_MANAGEMENT.PRODUCT_MST(PRODUCT_ID)
);

drop table SA_MANAGEMENT.PRODUCT_IN_EXPENSES;
CREATE TABLE SA_MANAGEMENT.PRODUCT_IN_EXPENSES
(
	SR_NO INTEGER PRIMARY KEY ,
	INVOICE_NO INTEGER,
    PRODUCT_NAME VARCHAR(50),	
	AMOUNT INTEGER,
    FOREIGN KEY (INVOICE_NO) REFERENCES SA_MANAGEMENT.EXPENSES(INVOICE_NO)
);

select * from SA_MANAGEMENT.product_in_purchase	 ;


DROP TRIGGER SA_MANAGEMENT.UPDATE_STOCK_ON_SALES;

DELIMITER //
CREATE TRIGGER SA_MANAGEMENT.UPDATE_STOCK_ON_SALES
AFTER INSERT ON SA_MANAGEMENT.PRODUCT_IN_SALES
FOR EACH ROW
BEGIN
    DECLARE STOCK_QUANTITY INTEGER;
    SET STOCK_QUANTITY= (SELECT QUANTITY FROM SA_MANAGEMENT.STOCK_MANAGEMENT WHERE PRODUCT_ID = NEW.PRODUCT_ID AND UNIT = NEW.UNIT);
    
    IF STOCK_QUANTITY IS NOT NULL THEN
        UPDATE SA_MANAGEMENT.STOCK_MANAGEMENT SET QUANTITY = STOCK_QUANTITY - NEW.QUANTITY
        WHERE PRODUCT_ID = NEW.PRODUCT_ID AND UNIT = NEW.UNIT;
    ELSE
        INSERT INTO SA_MANAGEMENT.STOCK_MANAGEMENT (PRODUCT_ID, UNIT, QUANTITY)
        VALUES (NEW.PRODUCT_ID, NEW.UNIT, -NEW.QUANTITY); 
    END IF;
END //
DELIMITER ;

DELIMITER //


CREATE TRIGGER SA_MANAGEMENT.UPDATE_STOCK_ON_PURCHASE
AFTER INSERT ON SA_MANAGEMENT.PRODUCT_IN_PURCHASE
FOR EACH ROW
BEGIN
    DECLARE STOCK_QUANTITY INTEGER;
    SET STOCK_QUANTITY = (SELECT QUANTITY FROM SA_MANAGEMENT.STOCK_MANAGEMENT  WHERE PRODUCT_ID = NEW.PRODUCT_ID AND UNIT = NEW.UNIT);
    
    IF STOCK_QUANTITY IS NOT NULL THEN
        UPDATE SA_MANAGEMENT.STOCK_MANAGEMENT SET QUANTITY = STOCK_QUANTITY + NEW.QUANTITY
        WHERE PRODUCT_ID = NEW.PRODUCT_ID AND UNIT = NEW.UNIT;
    ELSE
        INSERT INTO SA_MANAGEMENT.STOCK_MANAGEMENT (PRODUCT_ID, UNIT, QUANTITY)
        VALUES (NEW.PRODUCT_ID, NEW.UNIT, NEW.QUANTITY);
    END IF;
END //

CREATE TRIGGER SA_MANAGEMENT.UPDATE_STOCK_ON_SALES_DELETE
BEFORE DELETE ON SA_MANAGEMENT.PRODUCT_IN_SALES
FOR EACH ROW
BEGIN
    DECLARE STOCK_QUANTITY INTEGER;
    SET STOCK_QUANTITY = (SELECT QUANTITY FROM SA_MANAGEMENT.STOCK_MANAGEMENT WHERE PRODUCT_ID = OLD.PRODUCT_ID AND UNIT = OLD.UNIT);
    
    IF STOCK_QUANTITY IS NOT NULL THEN
        UPDATE SA_MANAGEMENT.STOCK_MANAGEMENT SET QUANTITY = STOCK_QUANTITY + OLD.QUANTITY
        WHERE PRODUCT_ID = OLD.PRODUCT_ID AND UNIT = OLD.UNIT;
    ELSE
        INSERT INTO SA_MANAGEMENT.STOCK_MANAGEMENT (PRODUCT_ID, UNIT, QUANTITY)
        VALUES (OLD.PRODUCT_ID, OLD.UNIT, OLD.QUANTITY); 
    END IF;
END//

CREATE TRIGGER SA_MANAGEMENT.UPDATE_STOCK_ON_PURCHASE_DELETE
BEFORE DELETE ON SA_MANAGEMENT.PRODUCT_IN_PURCHASE
FOR EACH ROW
BEGIN
    DECLARE STOCK_QUANTITY INTEGER;
    SET STOCK_QUANTITY = (SELECT QUANTITY FROM SA_MANAGEMENT.STOCK_MANAGEMENT WHERE PRODUCT_ID = OLD.PRODUCT_ID AND UNIT = OLD.UNIT);
    
    IF STOCK_QUANTITY IS NOT NULL THEN
        UPDATE SA_MANAGEMENT.STOCK_MANAGEMENT SET QUANTITY = STOCK_QUANTITY - OLD.QUANTITY
        WHERE PRODUCT_ID = OLD.PRODUCT_ID AND UNIT = OLD.UNIT;
    END IF;
END //

select * from CUSTOMER_MST limit 5;

SELECT S.INVOICE_NO,C.CUSTOMER_NAME,C.REGISTRATION_TYPE,S.BILL_DATE,S.GST,S.FREIGHT,S.DISCOUNT,S.NET_AMT,S.TOTAL_AMT
 FROM SA_MANAGEMENT.SALES_INVOICE S JOIN SA_MANAGEMENT.CUSTOMER_MST C ON
 (S.CUSTOMER_ID = C.CUSTOMER_ID) WHERE INVOICE_NO = 1;
 
 
 
desc CUSTOMER_MST;


SELECT EMPLOYEE_FULLNAME,USERID,DEPARTMENT,PHONE_NO,EMAIL FROM SA_MANAGEMENT.EMPLOYEE_DETAILS ;

select * from sa_management.stock_management;

